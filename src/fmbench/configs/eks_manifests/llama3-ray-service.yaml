#----------------------------------------------------------------------
# NOTE: For deployment instructions, refer to the DoEKS website.
#----------------------------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: llama3

---
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: llama3-service
  namespace: llama3
spec:
  serviceUnhealthySecondThreshold: 900
  deploymentUnhealthySecondThreshold: 900
  serveConfigV2: |
    applications:
      - name: llama3
        import_path: ray_serve_llama3:entrypoint
        runtime_env:
          env_vars:
            MODEL_ID: "meta-llama/Meta-Llama-3-8B-Instruct"
            HUGGING_FACE_HUB_TOKEN: $HUGGING_FACE_HUB_TOKEN
            LD_LIBRARY_PATH: "/home/ray/anaconda3/lib"
  rayClusterConfig:
    rayVersion: '2.11.0'
    headGroupSpec:
      headService:
        metadata:
          name: llama3-service
          namespace: llama3
      rayStartParams:
        dashboard-host: '0.0.0.0'
      template:
        spec:
          containers:
          - name: ray-head
            image: public.ecr.aws/data-on-eks/ray-serve-inf2-llama3:latest
            imagePullPolicy: Always # Ensure the image is always pulled when updated
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            ports:
            - containerPort: 6379
              name: gcs-server
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            resources:
              limits:
                cpu: "4"
                memory: "20Gi"
              requests:
                cpu: "4"
                memory: "20Gi"
            env:
              - name: LD_LIBRARY_PATH
                value: "/home/ray/anaconda3/lib"
          nodeSelector:
            instanceType: mixed-x86
            provisionerType: Karpenter
            workload: rayhead
          volumes:
          - name: ray-logs
            emptyDir: {}

    workerGroupSpecs:
    - groupName: inf2-worker-group
      replicas: 1
      minReplicas: 1
      maxReplicas: 1
      rayStartParams: {}
      template:
        spec:
          containers:
          - name: ray-worker
            image: public.ecr.aws/data-on-eks/ray-serve-inf2-llama3:latest
            imagePullPolicy: Always # Ensure the image is always pulled when updated
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            # We are using 2 Neuron cores per HTTP request hence this configuration handles 6 requests per second
            resources:
              limits:
                cpu: "180" # All vCPUs of inf2.24xlarge; 6vCPU daemonset overhead
                memory: "700G" # All memory of inf2.24xlarge; 24G for daemonset overhead
                aws.amazon.com/neuron: "12" # All Neuron cores of inf2.24xlarge
              requests:
                cpu: "180" # All vCPUs of inf2.24xlarge; 6vCPU daemonset overhead
                memory: "700G" # All memory of inf2.24xlarge; 24G for daemonset overhead
                aws.amazon.com/neuron: "12" # All Neuron cores of inf2.24xlarge
            env:
              - name: LD_LIBRARY_PATH
                value: /home/ray/anaconda3/lib
          nodeSelector:
            instanceType: inferentia-inf2
            provisionerType: Karpenter
          tolerations:
          - key: "aws.amazon.com/neuron"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "hub.jupyter.org/dedicated"
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: llama3-ingress
  namespace: llama3
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # Ray Dashboard
      - path: /dashboard/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: llama3-service
            port:
              number: 8265
  - http:
      paths:
      # Ray Serve
      - path: /serve/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: llama3-service
            port:
              number: 8000